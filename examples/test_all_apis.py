#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö API –º–µ—Ç–æ–¥–æ–≤ MerchantAPI
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã API –ø–æ –æ—á–µ—Ä–µ–¥–∏
"""

import sys
import time
from merchant_api import MerchantAPI
from settings import api_key, secret_key_b64

def print_separator(title):
    """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def print_result(method_name, success, data=None, error=None):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞"""
    status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
    print(f"{status} {method_name}")
    
    if success and data:
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(data)[:200]}...")
    elif error:
        print(f"  –û—à–∏–±–∫–∞: {error}")
    print("-" * 40)

def test_api_method(api, method_name, method_func, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–µ—Ç–æ–¥–æ–≤"""
    try:
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {method_name}...")
        result = method_func(*args, **kwargs)
        print_result(method_name, True, result)
        return True, result
    except Exception as e:
        print_result(method_name, False, error=str(e))
        return False, None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_separator("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ú–ï–†–ß–ê–ù–¢–ê")
    print(f"API Key: {api_key[:20]}...")
    print(f"Secret Key: {secret_key_b64[:20]}...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
    try:
        api = MerchantAPI(api_key, secret_key_b64)
        print("‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
        return
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tests = 0
    successful_tests = 0
    transaction_id = None
    dispute_id = None
    
    # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è timestamp
    print_separator("1. –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø TIMESTAMP")
    total_tests += 1
    success, result = test_api_method(api, "get_timestamp", api.get_timestamp)
    if success:
        successful_tests += 1
        print(f"  Timestamp: {result}")
    
    # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä—á–∞–Ω—Ç–µ
    print_separator("2. –¢–ï–°–¢ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ú–ï–†–ß–ê–ù–¢–ï")
    total_tests += 1
    success, result = test_api_method(api, "get_merchant_info", api.get_merchant_info)
    if success:
        successful_tests += 1
        merchant_name = result.get('merchant', {}).get('name', 'N/A')
        merchant_balance = result.get('merchant', {}).get('balance', 'N/A')
        print(f"  –ú–µ—Ä—á–∞–Ω—Ç: {merchant_name}")
        print(f"  –ë–∞–ª–∞–Ω—Å: {merchant_balance}")
    
    # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤
    print_separator("3. –¢–ï–°–¢ –°–ü–ò–°–ö–ê –ë–ê–ù–ö–û–í")
    total_tests += 1
    success, result = test_api_method(api, "get_banks_list", api.get_banks_list)
    if success:
        successful_tests += 1
        deposit_banks = len(result.get('deposit', []))
        withdraw_banks = len(result.get('withdraw', []))
        print(f"  –ë–∞–Ω–∫–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {deposit_banks}")
        print(f"  –ë–∞–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤: {withdraw_banks}")
    
    # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
    print_separator("4. –¢–ï–°–¢ –°–ü–ò–°–ö–ê –í–ê–õ–Æ–¢")
    total_tests += 1
    success, result = test_api_method(api, "get_currencies_list", api.get_currencies_list)
    if success:
        successful_tests += 1
        crypto_count = len(result.get('crypto', []))
        print(f"  –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {crypto_count}")
    
    # 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print_separator("5. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò")
    total_tests += 1
    success, result = test_api_method(
        api, "create_deposit_transaction", api.create_deposit_transaction,
        amount=502,
        user_id="test_user_123",
        order_type=1,  # C2C
        bank="Sberbank",
        back_url="https://example.com/success"
    )
    if success:
        successful_tests += 1
        transaction_id = result.get('transaction_id')
        payment_link = result.get('link')
        amount_info = result.get('amount', {})
        print(f"  Transaction ID: {transaction_id}")
        print(f"  –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_link}")
        print(f"  –°—É–º–º–∞: {amount_info.get('rub')} RUB / {amount_info.get('usdt')} USDT")
    
    # 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if transaction_id:
        print_separator("6. –¢–ï–°–¢ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–†–ê–ù–ó–ê–ö–¶–ò–ò")
        total_tests += 1
        success, result = test_api_method(
            api, "get_transaction_info", api.get_transaction_info,
            transaction_id
        )
        if success:
            successful_tests += 1
            status = result.get('status', 'N/A')
            amount = result.get('amount', 'N/A')
            print(f"  –°—Ç–∞—Ç—É—Å: {status}")
            print(f"  –°—É–º–º–∞: {amount}")
    
    # 7. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print_separator("7. –¢–ï–°–¢ –°–ü–ò–°–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô")
    total_tests += 1
    success, result = test_api_method(
        api, "get_transactions_list", api.get_transactions_list,
        page=1, per_page=5
    )
    if success:
        successful_tests += 1
        deposits_count = len(result.get('deposits', []))
        total_transactions = result.get('pagination', {}).get('total', 0)
        print(f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {deposits_count}")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}")
    
    # 8. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    print_separator("8. –¢–ï–°–¢ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –ö–û–ù–¢–†–ê–ì–ï–ù–¢–£")
    total_tests += 1
    test_contr_agent = "test_user_123"
    success, result = test_api_method(
        api, "get_transactions_by_contr_agent", api.get_transactions_by_contr_agent,
        contr_agent=test_contr_agent, page=1, per_page=5
    )
    if success:
        successful_tests += 1
        deposits_count = len(result.get('deposits', []))
        contr_agent = result.get('contr_agent', 'N/A')
        print(f"  –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {contr_agent}")
        print(f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {deposits_count}")
    
    # 9. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏—Å–ø—É—Ç–æ–≤
    print_separator("9. –¢–ï–°–¢ –°–ü–ò–°–ö–ê –î–ò–°–ü–£–¢–û–í")
    total_tests += 1
    success, result = test_api_method(
        api, "get_disputes_list", api.get_disputes_list,
        page=1, per_page=5
    )
    if success:
        successful_tests += 1
        disputes_count = len(result.get('disputes', []))
        total_disputes = result.get('pagination', {}).get('total', 0)
        print(f"  –î–∏—Å–ø—É—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {disputes_count}")
        print(f"  –í—Å–µ–≥–æ –¥–∏—Å–ø—É—Ç–æ–≤: {total_disputes}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –¥–∏—Å–ø—É—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if disputes_count > 0:
            dispute_id = result['disputes'][0]['id']
    
    # 10. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ø—É—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    print_separator("10. –¢–ï–°–¢ –î–ò–°–ü–£–¢–û–í –ü–û –ö–û–ù–¢–†–ê–ì–ï–ù–¢–£")
    total_tests += 1
    success, result = test_api_method(
        api, "get_disputes_by_contr_agent", api.get_disputes_by_contr_agent,
        contr_agent=test_contr_agent, page=1, per_page=5
    )
    if success:
        successful_tests += 1
        disputes_count = len(result.get('disputes', []))
        contr_agent = result.get('contr_agent', 'N/A')
        print(f"  –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {contr_agent}")
        print(f"  –î–∏—Å–ø—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {disputes_count}")
    
    # 11. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–ø—É—Ç–µ
    if dispute_id:
        print_separator("11. –¢–ï–°–¢ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –î–ò–°–ü–£–¢–ï")
        total_tests += 1
        success, result = test_api_method(
            api, "get_dispute_info", api.get_dispute_info,
            dispute_id
        )
        if success:
            successful_tests += 1
            dispute_status = result.get('dispute', {}).get('status', 'N/A')
            transaction_info = result.get('dispute', {}).get('transaction', {})
            print(f"  –°—Ç–∞—Ç—É—Å –¥–∏—Å–ø—É—Ç–∞: {dispute_status}")
            print(f"  ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_info.get('id', 'N/A')}")
    
    # 12. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è callback URL (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!)
    print_separator("12. –¢–ï–°–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø CALLBACK URL")
    print("‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù - –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞")
    print("   –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:")
    print("   # success, result = test_api_method(")
    print("   #     api, 'change_callback_url', api.change_callback_url,")
    print("   #     'https://example.com/webhook'")
    print("   # )")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SBP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print_separator("13. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø SBP –¢–†–ê–ù–ó–ê–ö–¶–ò–ò")
    total_tests += 1
    success, result = test_api_method(
        api, "create_sbp_transaction", api.create_deposit_transaction,
        amount=750,
        user_id="test_sbp_user_" + str(int(time.time())),
        order_type=2,  # SBP
        bank="Sberbank"
    )
    if success:
        successful_tests += 1
        transaction_id_sbp = result.get('transaction_id')
        print(f"  SBP Transaction ID: {transaction_id_sbp}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_separator("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate >= 80:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    elif success_rate >= 60:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API.")
    
    print("\n" + "="*60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("="*60)

if __name__ == "__main__":
    main() 